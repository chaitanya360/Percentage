{"version":3,"sources":["AlgoRhytm/Sorting/BarsContainer.jsx","AlgoRhytm/Sorting/MainArea.js","AlgoRhytm/Sorting/SortingIndex.js","AlgoRhytm/Searching/Array.jsx","AlgoRhytm/Searching/WorkArea.jsx","AlgoRhytm/AlgoIndex.js","Percentage/percentage.js","index.js"],"names":["BarsContainer","props","bars","OnGenerateButtonPressed","OnSortButtonPressed","sortTypes","OnOrientationPressed","onSortTypeSelected","orientation","barsHeight","barsWidth","onSpeedSliderChange","sortingSpeed","onBarsHeightChange","onBarsWidthChange","windoWidth","onSortingPressed","onSearchingPressed","isSortingSelected","getBarsStyle","e","width","height","getSearchingBtnStyle","border","color","opacity","backgroundColor","getSortingBtnStyle","Fragment","Grid","container","direction","justify","alignItems","item","className","Paper","square","elevation","style","paddingTop","marginRight","class","map","customeClass","onClick","value","display","right","position","borderColor","marginLeft","Slider","top","onChange","aria-labelledby","min","max","minHeight","barsCustomClass","pos","MainArea","state","totalBars","sortButtonIsPressed","isSorting","generateButtonisActive","windowHeight","id","sortTypeSelected","isUniform","sortIntervalId","barsClone","i","j","n","key","tempBars","min_idx","high","low","resetEverything","setState","handleOnGenerateButtonPressed","console","log","clearInterval","barsCopy","currWidth","currHeight","widthDiff","heightDiff","randomHight","Math","floor","random","push","randomWidth","length","clone","componentDidMount","updateWindowDimensions","window","addEventListener","innerWidth","innerHeight","handleOnSortButtonPressed","BubbleSort","insertionSort","selectionSort","quickSortHandler","mergeSortHandler","heapSortHandler","radixsortHandler","shellSortHandler","bucketSort","alert","handleOnSortTypeSelected","type","sortTypesCopy","cloneDeep","handleOnOrientationPressed","handleOnOrientationPressed2","setInterval","selectionSortInnerDriven","temp","handleonBarsHeightChange","newvalue","handleonBarsHeightChangeDiven","handleonBarsWidthChange","handleonBarsWidthChangeDriven","handeleOnSpeedSliderChange","BubbleSortInnerDriven","insertionSortInnerDriven","colorSortedBars","obj","this","sleep","ms","Promise","resolve","setTimeout","quickSort","start","end","partition","index","pivotValue","pivotIndex","mergeSort","l","m","r","n1","n2","L","R","k","parseInt","merge","heapSort","heapify","largest","swap","mx","exp","output","Array","count","radixsort","getMax","countSort","shellSort","gap","ratio","size","b","bi","sort","barsPosition","onbarSizeSliderChange","handleOnbarSizeSliderChange","Component","SortingIndex","array","onArrayValueChange","onhandleSearchValuechange","onSearchkeypressed","searchKey","searchBoxStyle","shouldDisplayResult","searching","arraySize","onhandleArraySizeValuechange","keyFound","generateButtonPlaced","onfillrandomButtonPressed","onSortButtonPressed","isBinarySearch","handleOnLinearPressed","handleonBinaryPressed","Result","Sort","maxLength","Button","variant","children","element","customClass","name","WorkArea","intervalTime","stopTime","isSorted","middleInBinary","handleArrayValuechange","resetArrayStyle","arrayConst","target","handleArraySizeValuechange","handleSearchValuechange","tempSearchKey","handlegenerateButtonPlaced","arrayClone","handleSortButtonPressed","tempArray","a","handlefillrandomButtonPressed","handleonSearchkeypressed","binarySearch","intervalId","linearSearch","sortedArray","intervalid","middle","ShowComparisation","compareresult","showComparisation","Percentage","useState","votes","setVotes","total","setTotal","padding","per","document","getElementById","innerHTML","toPrecision","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5d7e692c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./sorting.css\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\n\r\nconst BarsContainer = (props) => {\r\n  const {\r\n    bars,\r\n    OnGenerateButtonPressed,\r\n    OnSortButtonPressed,\r\n    sortTypes,\r\n    OnOrientationPressed,\r\n    onSortTypeSelected,\r\n    orientation,\r\n    barsHeight,\r\n    barsWidth,\r\n    onSpeedSliderChange,\r\n    sortingSpeed,\r\n    onBarsHeightChange,\r\n    onBarsWidthChange,\r\n    windoWidth,\r\n    onSortingPressed,\r\n    onSearchingPressed,\r\n    isSortingSelected,\r\n  } = props;\r\n\r\n  function getBarsContainerStyle() {\r\n    if (windoWidth > 700) return { minHeight: \"620px\" };\r\n    else return { minHeight: \"530px\" };\r\n  }\r\n\r\n  function getBarsStyle(e) {\r\n    if (orientation[0] === \"vertical\")\r\n      return { width: \"\" + e.width + \"px\", height: \"\" + barsHeight + \"px\" };\r\n    else {\r\n      return { height: \"\" + e.width + \"px\", width: \"\" + barsWidth + \"px\" };\r\n    }\r\n  }\r\n\r\n  function getWidthStyle() {\r\n    if (orientation[0] === \"vertical\") return \"none\";\r\n    else return \"inline-block\";\r\n  }\r\n\r\n  function getHightStyle() {\r\n    if (orientation[0] === \"horizontal\") return \"none\";\r\n    else return \"inline-block\";\r\n  }\r\n\r\n  function getSearchingBtnStyle() {\r\n    if (isSortingSelected) {\r\n      return { border: \"1px solid red\", color: \"white\", opacity: \"0.9\" };\r\n    } else\r\n      return {\r\n        border: \"1px solid red\",\r\n        backgroundColor: \"#351735\",\r\n        color: \"white\",\r\n      };\r\n  }\r\n\r\n  function getSortingBtnStyle() {\r\n    if (!isSortingSelected) {\r\n      return { border: \"1px solid red\", color: \"white\", opacity: \"0.9\" };\r\n    } else\r\n      return {\r\n        border: \"1px solid red\",\r\n        backgroundColor: \"#351735\",\r\n        color: \"white\",\r\n      };\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        justify=\"flex-start\"\r\n        alignItems=\"baseline\"\r\n      >\r\n        <Grid item className=\"w-100 mb\">\r\n          <Paper\r\n            square\r\n            elevation={3}\r\n            style={{\r\n              backgroundColor: \"rgba(53,23,53,1)\",\r\n              paddingTop: \"0px\",\r\n              marginRight: \"0px\",\r\n            }}\r\n          >\r\n            <div class=\"row sort_typesGroup pt-2\">\r\n              {sortTypes.map((e) => (\r\n                <span\r\n                  className={\"sort_type \" + e.customeClass}\r\n                  onClick={() => onSortTypeSelected(e)}\r\n                >\r\n                  {/* {e[0].toUpperCase() + e.substring(1)} */ e.value}\r\n                </span>\r\n              ))}\r\n              {windoWidth > 700 ? (\r\n                <span\r\n                  style={{\r\n                    display: \"inline-block\",\r\n                    right: \"10px\",\r\n                    position: \"absolute\",\r\n                  }}\r\n                  className=\"algo_option_container\"\r\n                >\r\n                  <button\r\n                    className=\"algo_option\"\r\n                    onClick={onSearchingPressed}\r\n                    style={getSearchingBtnStyle()}\r\n                  >\r\n                    Searching\r\n                  </button>\r\n                  <button\r\n                    className=\"mr-3 algo_option\"\r\n                    onClick={onSortingPressed}\r\n                    style={getSortingBtnStyle()}\r\n                  >\r\n                    Sorting\r\n                  </button>\r\n                </span>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n\r\n            <button onClick={OnGenerateButtonPressed} className=\"driver_btn\">\r\n              Generate\r\n            </button>\r\n            <button\r\n              className=\"driver_btn \"\r\n              onClick={OnSortButtonPressed}\r\n              style={{ color: \"red\", borderColor: \"red\" }}\r\n            >\r\n              Sort\r\n            </button>\r\n            <button className=\"driver_btn \" onClick={OnOrientationPressed}>\r\n              V/H\r\n            </button>\r\n            {windoWidth < 700 ? (\r\n              <span\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  right: \"10px\",\r\n                  position: \"absolute\",\r\n                }}\r\n                className=\"algo_option_container\"\r\n              >\r\n                {isSortingSelected ? (\r\n                  <button\r\n                    className=\"algo_option\"\r\n                    onClick={onSearchingPressed}\r\n                    style={getSearchingBtnStyle()}\r\n                  >\r\n                    Searching\r\n                  </button>\r\n                ) : (\r\n                  <button\r\n                    className=\"mr-3 ml-0 algo_option\"\r\n                    onClick={onSortingPressed}\r\n                    style={getSortingBtnStyle()}\r\n                  >\r\n                    Sorting\r\n                  </button>\r\n                )}\r\n              </span>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {windoWidth > 500 ? \"\" : <br />}\r\n            <span style={{ marginLeft: \"20px\", color: \"white\" }}>\r\n              <span>Speed</span>\r\n              <Slider\r\n                value={sortingSpeed}\r\n                style={{ width: \"100px\", top: \"10px\" }}\r\n                onChange={onSpeedSliderChange}\r\n                aria-labelledby=\"continuous-slider\"\r\n                className=\"ml-3 speed_slider \"\r\n                color=\"secondary\"\r\n                min={1}\r\n                max={49}\r\n              />\r\n            </span>\r\n            <span\r\n              style={{\r\n                marginLeft: \"40px\",\r\n                color: \"white\",\r\n                display: getWidthStyle(),\r\n              }}\r\n            >\r\n              <span>Width</span>\r\n              <Slider\r\n                value={barsWidth}\r\n                style={{ width: \"100px\", top: \"10px\" }}\r\n                onChange={onBarsWidthChange}\r\n                aria-labelledby=\"continuous-slider\"\r\n                className=\"ml-3\"\r\n                color=\"secondary\"\r\n                min={3}\r\n                max={25}\r\n              />\r\n            </span>\r\n            <span\r\n              style={{\r\n                marginLeft: \"40px\",\r\n                color: \"white\",\r\n                display: getHightStyle(),\r\n              }}\r\n            >\r\n              <span>Height</span>\r\n              <Slider\r\n                value={barsHeight}\r\n                style={{ width: \"100px\", top: \"10px\" }}\r\n                onChange={onBarsHeightChange}\r\n                aria-labelledby=\"continuous-slider\"\r\n                className=\"speed_slider ml-3\"\r\n                color=\"secondary\"\r\n                min={5}\r\n                max={15}\r\n              />\r\n            </span>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"flex-start\"\r\n          className=\"bars_container\"\r\n          style={getBarsContainerStyle()}\r\n        >\r\n          <Grid\r\n            container\r\n            justify={orientation[1]} //center   //flex-end\r\n            direction={orientation[2]} //column //row-reverse\r\n            alignItems={orientation[3]} //center          //flex-end  {barsPosition}\r\n          >\r\n            {bars.map((e) => (\r\n              <div\r\n                className={\"bar \" + e.barsCustomClass}\r\n                style={getBarsStyle(e)}\r\n                key={e.pos}\r\n              ></div>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BarsContainer;\r\n","import \"./sorting.css\";\r\nimport React, { Component } from \"react\";\r\nimport BarsContainer from \"./BarsContainer.jsx\";\r\nimport { cloneDeep } from \"lodash\";\r\n\r\nclass MainArea extends Component {\r\n  state = {\r\n    bars: [], //width is either width or height depending upon the orientation\r\n    totalBars: 0, //305    125\r\n    barsHeight: 15, //if you want to change this then also change in .css  //2.18  //8.18\r\n    barsWidth: 15, //5  multiplying fact in case of horizontal //1.6\r\n    sortButtonIsPressed: false,\r\n    isSorting: false,\r\n    orientation: [\r\n      \"horizontal\",\r\n      \"flex-end\",\r\n      \"row-reverse\",\r\n      \"flex-end\",\r\n      \"height\",\r\n    ],\r\n    generateButtonisActive: true,\r\n    windoWidth: 0,\r\n    windowHeight: 0,\r\n    sortTypes: [\r\n      { value: \"bubble\", id: 0, customeClass: \"\" },\r\n      { value: \"selection\", id: 0, customeClass: \"\" },\r\n      { value: \"insertion\", id: 0, customeClass: \"\" },\r\n      { value: \"quick\", id: 0, customeClass: \"\" },\r\n      { value: \"heap\", id: 0, customeClass: \"\" },\r\n      { value: \"merge\", id: 0, customeClass: \"\" },\r\n      { value: \"radix\", id: 0, customeClass: \"\" },\r\n      { value: \"shell\", id: 0, customeClass: \"\" },\r\n      { value: \"bucket\", id: 0, customeClass: \"\" },\r\n    ], //\"bubble,selection,insertion,quick,merge,heap,radix,shell,bucket\"   /b-18 s-18 in-\r\n    sortTypeSelected: \"\",\r\n    sortingSpeed: 49, //decreasing this will increase the speed\r\n    isUniform: false, //steady slop\r\n    // barsPosition: \"flex-end\", //\"center\",\"flex-end\"\r\n  };\r\n\r\n  sortIntervalId = 0;\r\n\r\n  barsClone = [];\r\n  i = 0;\r\n  j = 0;\r\n  n = 0;\r\n  key = 0;\r\n  tempBars = [];\r\n  min_idx = 0;\r\n  high = 0;\r\n  low = 0;\r\n\r\n  clone(obj) {\r\n    return cloneDeep(obj);\r\n  }\r\n\r\n  resetEverything = () => {\r\n    this.i = 0;\r\n    this.j = 0;\r\n    this.key = 0;\r\n    this.tempBars = [];\r\n    this.n = 0;\r\n    this.barsClone = [];\r\n    this.min_idx = 0;\r\n    this.setState({ isSorting: false });\r\n  };\r\n\r\n  handleOnGenerateButtonPressed = () => {\r\n    console.log(this.props);\r\n\r\n    if (!this.state.isSorting) {\r\n      clearInterval(this.sortIntervalId);\r\n      this.setState({ isSorting: false });\r\n\r\n      if (this.state.generateButtonisActive) {\r\n        this.resetEverything();\r\n        //generating random widths\r\n        let barsCopy = [];\r\n        let currWidth = 0;\r\n        let currHeight = 0;\r\n        let widthDiff = 400;\r\n        let heightDiff = 120;\r\n        let rightSpace = 30;\r\n        if (this.state.windoWidth < 1050) {\r\n          widthDiff = 40; //for mobile\r\n          heightDiff = 60;\r\n        } else {\r\n          widthDiff = 940;\r\n        }\r\n\r\n        if (this.state.orientation[0] == \"horizontal\") {\r\n          if (this.state.windoWidth < 1050) {\r\n            currWidth = heightDiff - 40;\r\n            heightDiff += heightDiff * 3;\r\n            rightSpace = 0;\r\n          }\r\n          for (\r\n            let i = 0;\r\n            currWidth < this.state.windoWidth - this.state.barsWidth;\r\n            i++\r\n          ) {\r\n            let randomHight = Math.floor(\r\n              Math.random() * (this.state.windowHeight - heightDiff * 1.7) + 1\r\n            );\r\n            currWidth += this.state.barsWidth;\r\n\r\n            barsCopy.push({\r\n              pos: i,\r\n              width: randomHight,\r\n              barsCustomClass: \"\",\r\n            });\r\n          }\r\n        } else {\r\n          if (this.state.windoWidth < 550) currHeight = heightDiff * 2.2;\r\n          else {\r\n            currHeight = 30;\r\n            // widthDiff = 3000;\r\n          }\r\n          for (let i = 0; currHeight < this.state.windowHeight - 152.5; i++) {\r\n            let randomWidth = Math.floor(\r\n              Math.random() * (this.state.windoWidth - widthDiff) + 1\r\n            );\r\n\r\n            currHeight += this.state.barsHeight;\r\n\r\n            barsCopy.push({\r\n              pos: i,\r\n              width: randomWidth,\r\n              barsCustomClass: \"\",\r\n            });\r\n          }\r\n        }\r\n\r\n        // //this.state.totalBars\r\n        // if (!this.state.isHorizontal) {\r\n        //   while (barsWidths.length < this.state.totalBars) {\r\n        //     var r = Math.floor(Math.random() * this.state.totalBars) + 1;\r\n        //     if (\r\n        //       barsWidths.indexOf(r * this.state.barsHeight) === -1 ||\r\n        //       !this.state.isUniform\r\n        //     )\r\n        //       barsWidths.push(r * this.state.barsHeight);\r\n        //   }\r\n        // } else {\r\n        //   while (barsHeights.length < this.state.totalBars) {\r\n        //     //this is for total no. of bars\r\n        //     var r = Math.floor(Math.random() * maxHeight) + 1; //here\r\n        //     if (\r\n        //       barsHeights.indexOf(r * this.state.barsWidth) === -1 ||\r\n        //       !this.state.isUniform\r\n        //     )\r\n        //       barsHeights.push(r * this.state.barsWidth);\r\n        //   }\r\n        // }\r\n\r\n        // let i;\r\n        // for (i = 0; i < this.state.totalBars; i++) {\r\n        //   if (!this.state.isHorizontal)\r\n        //     barsCopy.push({\r\n        //       pos: i,\r\n        //       width: barsWidths[i] - 3,\r\n        //       barsCustomClass: \"\",\r\n        //     });\r\n        //   else\r\n        //     barsCopy.push({\r\n        //       pos: i,\r\n        //       width: barsHeights[i] - 3,\r\n        //       barsCustomClass: \"\",\r\n        //     });\r\n        // }\r\n\r\n        this.setState({ bars: barsCopy, totalBars: barsCopy.length });\r\n\r\n        //initialising the barsClone\r\n\r\n        this.barsClone = this.clone(barsCopy);\r\n      }\r\n    }\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.updateWindowDimensions();\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\r\n  };\r\n\r\n  updateWindowDimensions = () => {\r\n    this.handleOnGenerateButtonPressed();\r\n    if (window.innerWidth < 1000)\r\n      //for mobile setting opening orientation as vertical\r\n      this.setState({\r\n        orientation: [\"vertical\", \"flex-end\", \"column\", \"center\", \"width\"],\r\n      });\r\n    this.setState({\r\n      windoWidth: window.innerWidth,\r\n      windowHeight: window.innerHeight,\r\n    });\r\n  };\r\n\r\n  handleOnSortButtonPressed = () => {\r\n    if (\r\n      !this.state.isSorting &&\r\n      this.state.bars.length > 0 &&\r\n      this.state.bars[0].barsCustomClass == \"\"\r\n    ) {\r\n      this.setState({ bars: this.barsClone, isSorting: true });\r\n      this.setState({ generateButtonisActive: false });\r\n      switch (this.state.sortTypeSelected.value) {\r\n        case \"bubble\":\r\n          this.BubbleSort();\r\n          this.setState({ generateButtonisActive: true, isSorting: false });\r\n          break;\r\n\r\n        case \"insertion\":\r\n          this.insertionSort();\r\n          this.setState({ generateButtonisActive: true, isSorting: false });\r\n          break;\r\n\r\n        case \"selection\":\r\n          this.selectionSort();\r\n          this.setState({ generateButtonisActive: true, isSorting: false });\r\n          break;\r\n\r\n        case \"quick\":\r\n          this.quickSortHandler();\r\n          break;\r\n\r\n        case \"merge\":\r\n          this.mergeSortHandler();\r\n          break;\r\n\r\n        case \"heap\":\r\n          this.heapSortHandler();\r\n          break;\r\n\r\n        case \"radix\":\r\n          this.radixsortHandler();\r\n          break;\r\n\r\n        case \"shell\":\r\n          this.shellSortHandler();\r\n          break;\r\n\r\n        case \"bucket\":\r\n          this.bucketSort();\r\n          this.setState({ bars: this.barsClone });\r\n          this.setState({ generateButtonisActive: true, isSorting: false });\r\n          break;\r\n\r\n        default:\r\n          alert(\"select sort type\");\r\n          this.setState({ isSorting: false });\r\n          break;\r\n      }\r\n    } else {\r\n      if (this.state.isSorting) alert(\"already in process\");\r\n      else alert(\"Generate first,DUde!\");\r\n    }\r\n  };\r\n\r\n  handleOnSortTypeSelected = (type) => {\r\n    if (!this.state.isSorting) {\r\n      this.handleOnGenerateButtonPressed();\r\n      this.setState({\r\n        generateButtonisActive: true,\r\n        isSorting: false,\r\n      });\r\n      if (this.barsClone.length == 0) {\r\n        this.handleOnGenerateButtonPressed();\r\n        this.setState({\r\n          generateButtonisActive: true,\r\n          isSorting: false,\r\n        });\r\n      }\r\n      let sortTypesCopy = cloneDeep(this.state.sortTypes);\r\n      for (let i = 0; i < this.state.sortTypes.length; i++) {\r\n        if (this.state.sortTypes[i] == type)\r\n          sortTypesCopy[i].customeClass = \"sort_button_pressed\";\r\n        else {\r\n          sortTypesCopy[i].customeClass = \"\";\r\n        }\r\n      }\r\n\r\n      this.setState({\r\n        sortTypeSelected: type,\r\n        sortTypes: sortTypesCopy,\r\n        generateButtonisActive: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleOnOrientationPressed = () => {\r\n    this.handleOnOrientationPressed2();\r\n  };\r\n\r\n  async handleOnOrientationPressed2() {\r\n    if (this.state.orientation[0] == \"vertical\")\r\n      this.setState({\r\n        orientation: [\r\n          \"horizontal\",\r\n          \"flex-end\",\r\n          \"row-reverse\",\r\n          \"flex-end\",\r\n          \"height\",\r\n        ],\r\n      });\r\n    else {\r\n      this.setState({\r\n        orientation: [\"vertical\", \"flex-end\", \"column\", \"center\", \"width\"],\r\n      });\r\n    }\r\n    await this.sleep(5);\r\n    this.handleOnGenerateButtonPressed();\r\n  }\r\n\r\n  ///selection sort -----------------------------------------\r\n\r\n  selectionSort = () => {\r\n    this.n = this.barsClone.length;\r\n    this.j = 1; //in if I am using preincrement so for first comparison j becomes 0\r\n    this.i = 0;\r\n    this.min_idx = 0;\r\n    this.sortIntervalId = setInterval(\r\n      this.selectionSortInnerDriven,\r\n      50 - this.state.sortingSpeed\r\n    );\r\n  };\r\n\r\n  selectionSortInnerDriven = () => {\r\n    //for n passses\r\n\r\n    if (this.i >= this.n - 1) {\r\n      clearInterval(this.sortIntervalId);\r\n\r\n      this.setState({ bars: this.barsClone, isSorting: false });\r\n    }\r\n    if (this.j < this.n) {\r\n      if (this.barsClone[this.j].width < this.barsClone[this.min_idx].width) {\r\n        this.min_idx = this.j;\r\n      }\r\n      this.j++;\r\n    } else {\r\n      const temp = this.barsClone[this.min_idx].width;\r\n      this.barsClone[this.min_idx].width = this.barsClone[this.i].width;\r\n      this.barsClone[this.i].width = temp;\r\n      this.barsClone[this.i].barsCustomClass = \"sorted_bar\";\r\n      this.setState({ bars: this.barsClone });\r\n      this.i++;\r\n      this.min_idx = this.i;\r\n      this.j = this.i + 1;\r\n    }\r\n\r\n    if (this.i < this.n && this.j < this.n) {\r\n      const tempBars = cloneDeep(this.barsClone);\r\n      tempBars[this.min_idx].barsCustomClass = \"current_bar\";\r\n      if (this.i < this.min_idx)\r\n        tempBars[this.i].barsCustomClass = \"current_bar\";\r\n      this.setState({ bars: tempBars });\r\n    }\r\n  };\r\n\r\n  handleonBarsHeightChange = (e, newvalue) => {\r\n    this.handleonBarsHeightChangeDiven(e, newvalue);\r\n  };\r\n\r\n  async handleonBarsHeightChangeDiven(e, newvalue) {\r\n    this.setState({ barsHeight: newvalue });\r\n    await this.sleep(1);\r\n    this.handleOnGenerateButtonPressed();\r\n  }\r\n\r\n  handleonBarsWidthChange = (e, newvalue) => {\r\n    this.handleonBarsWidthChangeDriven(e, newvalue);\r\n  };\r\n\r\n  async handleonBarsWidthChangeDriven(e, newvalue) {\r\n    this.setState({ barsWidth: newvalue });\r\n    await this.sleep(1);\r\n    this.handleOnGenerateButtonPressed();\r\n  }\r\n\r\n  handeleOnSpeedSliderChange = (e, newvalue) => {\r\n    if (!this.state.sortButtonIsPressed) this.handleOnGenerateButtonPressed();\r\n    this.setState({ sortingSpeed: newvalue });\r\n  };\r\n\r\n  //bubble sort =-------------------------------------------------------------\r\n  BubbleSort() {\r\n    this.n = this.barsClone.length;\r\n    this.j = -1; //in if I am using preincrement so for first comparison j becomes 0\r\n    this.i = 0;\r\n    this.sortIntervalId = setInterval(\r\n      this.BubbleSortInnerDriven,\r\n      50 - this.state.sortingSpeed\r\n    );\r\n  }\r\n\r\n  BubbleSortInnerDriven = () => {\r\n    //for n passses\r\n\r\n    if (this.i >= this.n - 1) {\r\n      clearInterval(this.sortIntervalId);\r\n    }\r\n    if (++this.j < this.n - this.i - 1) {\r\n      if (this.barsClone[this.j].width > this.barsClone[this.j + 1].width) {\r\n        // swap\r\n        let temp = this.barsClone[this.j].width;\r\n        this.barsClone[this.j].width = this.barsClone[this.j + 1].width;\r\n        this.barsClone[this.j + 1].width = temp;\r\n\r\n        //color current\r\n        const tempBars = cloneDeep(this.barsClone);\r\n        tempBars[this.j].barsCustomClass = \"current_bar\";\r\n        tempBars[this.j + 1].barsCustomClass = \"current_bar\";\r\n        this.setState({ bars: tempBars });\r\n      }\r\n    } else {\r\n      this.i++;\r\n      // if (this.i <= this.n)\r\n      this.barsClone[this.n - this.i].barsCustomClass = \"sorted_bar\";\r\n      this.setState({ bars: this.barsClone });\r\n      this.j = -1;\r\n      return;\r\n    }\r\n  };\r\n\r\n  //insertion sort ---------------------------------------------------------\r\n  insertionSort = () => {\r\n    this.n = this.barsClone.length;\r\n    this.i = 1;\r\n    this.key = this.barsClone[this.i].width;\r\n    this.j = this.i - 1;\r\n    this.sortIntervalId = setInterval(\r\n      this.insertionSortInnerDriven,\r\n      50 - this.state.sortingSpeed\r\n    );\r\n  };\r\n\r\n  insertionSortInnerDriven = () => {\r\n    if (this.i >= this.n) {\r\n      clearInterval(this.sortIntervalId);\r\n      this.setState({ bars: this.barsClone });\r\n      this.colorSortedBars();\r\n    }\r\n\r\n    if (this.j >= 0 && this.barsClone[this.j].width > this.key) {\r\n      this.barsClone[this.j + 1].width = this.barsClone[this.j].width;\r\n      const tempBars = cloneDeep(this.barsClone);\r\n      tempBars[this.j].barsCustomClass = \"current_bar\";\r\n      // tempBars[this.j + 1].barsCustomClass = \"current_bar\";\r\n      this.setState({ bars: tempBars });\r\n      this.j--;\r\n    } else {\r\n      this.barsClone[this.j + 1].width = this.key;\r\n      this.i++;\r\n      if (this.i < this.n) {\r\n        this.key = this.barsClone[this.i].width;\r\n        this.j = this.i - 1;\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  async quickSortHandler() {\r\n    await this.quickSort(0, this.state.totalBars - 1);\r\n    this.colorSortedBars();\r\n    this.setState({ generateButtonisActive: true, isSorting: false });\r\n  }\r\n\r\n  async quickSort(start, end) {\r\n    // Base case or terminating case\r\n    if (start >= end) {\r\n      // this.setState({ bars: this.barsClone });\r\n      // this.colorSortedBars();\r\n      return;\r\n    }\r\n\r\n    // Returns pivotIndex\r\n    let index = await this.partition(start, end);\r\n\r\n    // Recursively apply the same logic to the left and right subarrays\r\n    await this.quickSort(start, index - 1);\r\n    // await this.sleep(5);\r\n    await this.quickSort(index + 1, end);\r\n  }\r\n\r\n  async partition(start, end) {\r\n    // Taking the last element as the pivot\r\n    const pivotValue = this.barsClone[end].width;\r\n    let pivotIndex = start;\r\n    for (let i = start; i < end; i++) {\r\n      await this.sleep(50 - this.state.sortingSpeed);\r\n      if (this.barsClone[i].width < pivotValue) {\r\n        // Swapping elements\r\n        [this.barsClone[i].width, this.barsClone[pivotIndex].width] = [\r\n          this.barsClone[pivotIndex].width,\r\n          this.barsClone[i].width,\r\n        ];\r\n\r\n        const tempBars = cloneDeep(this.barsClone);\r\n        tempBars[i].barsCustomClass = \"current_bar\";\r\n        tempBars[pivotIndex].barsCustomClass = \"current_bar\";\r\n        this.setState({ bars: tempBars });\r\n        // Moving to next element\r\n        pivotIndex++;\r\n      }\r\n    }\r\n\r\n    // Putting the pivot value in the middle\r\n    [this.barsClone[pivotIndex].width, this.barsClone[end].width] = [\r\n      this.barsClone[end].width,\r\n      this.barsClone[pivotIndex].width,\r\n    ];\r\n    return pivotIndex;\r\n  }\r\n\r\n  async mergeSortHandler() {\r\n    await this.mergeSort(0, this.state.totalBars - 1);\r\n    this.colorSortedBars();\r\n    this.setState({ generateButtonisActive: true, isSorting: false });\r\n  }\r\n\r\n  async merge(l, m, r) {\r\n    let n1 = m - l + 1;\r\n    let n2 = r - m;\r\n\r\n    // Create temp arrays\r\n    let L = [];\r\n    let R = [];\r\n\r\n    // Copy data to temp arrays L[] and R[]\r\n    for (let i = 0; i < n1; i++) {\r\n      L[i] = this.barsClone[l + i].width;\r\n    }\r\n    for (let j = 0; j < n2; j++) {\r\n      R[j] = this.barsClone[m + 1 + j].width;\r\n    }\r\n\r\n    // Merge the temp arrays back into arr[l..r]\r\n\r\n    // Initial index of first subarray\r\n    let i = 0;\r\n\r\n    // Initial index of second subarray\r\n    let j = 0;\r\n\r\n    // Initial index of merged subarray\r\n    let k = l;\r\n\r\n    while (i < n1 && j < n2) {\r\n      if (L[i] <= R[j]) {\r\n        this.barsClone[k].width = L[i];\r\n        i++;\r\n      } else {\r\n        this.barsClone[k].width = R[j];\r\n        j++;\r\n      }\r\n      k++;\r\n\r\n      await this.sleep(50 - this.state.sortingSpeed);\r\n      const tempBars = cloneDeep(this.barsClone);\r\n      tempBars[k].barsCustomClass = \"current_bar\";\r\n      this.setState({ bars: tempBars });\r\n    }\r\n\r\n    // Copy the remaining elements of\r\n    // L[], if there are any\r\n    while (i < n1) {\r\n      this.barsClone[k].width = L[i];\r\n      i++;\r\n      k++;\r\n    }\r\n\r\n    // Copy the remaining elements of\r\n    // R[], if there are any\r\n    while (j < n2) {\r\n      this.barsClone[k].width = R[j];\r\n      j++;\r\n      k++;\r\n    }\r\n  }\r\n\r\n  async mergeSort(l, r) {\r\n    if (l >= r) {\r\n      return; //returns recursively\r\n    }\r\n    let m = parseInt((l + r - 1) / 2);\r\n    await this.mergeSort(l, m);\r\n    await this.mergeSort(m + 1, r);\r\n    await this.merge(l, m, r);\r\n  }\r\n\r\n  async heapSortHandler() {\r\n    await this.heapSort();\r\n    this.barsClone[0].barsCustomClass = \"sorted_bar\";\r\n    this.setState({\r\n      generateButtonisActive: true,\r\n      bars: this.barsClone,\r\n      isSorting: false,\r\n    });\r\n  }\r\n\r\n  async heapSort() {\r\n    let n = this.state.totalBars;\r\n\r\n    // Build heap (rearrange array)\r\n    for (let i = parseInt(n / 2 - 1); i >= 0; i--) await this.heapify(n, i);\r\n\r\n    // One by one extract an element from heap\r\n    for (let i = n - 1; i > 0; i--) {\r\n      // Move current root to end\r\n      let temp = this.barsClone[0].width;\r\n      this.barsClone[0].width = this.barsClone[i].width;\r\n      this.barsClone[i].width = temp;\r\n      this.barsClone[i].barsCustomClass = \"sorted_bar\";\r\n\r\n      // call max heapify on the reduced heap\r\n      await this.heapify(i, 0);\r\n    }\r\n  }\r\n\r\n  // To heapify a subtree rooted with node i which is\r\n  // an index in arr[]. n is size of heap\r\n  async heapify(n, i) {\r\n    await this.sleep(50 - this.state.sortingSpeed);\r\n\r\n    let largest = i; // Initialize largest as root\r\n    let l = parseInt(2 * i + 1); // left = 2*i + 1\r\n    let r = parseInt(2 * i + 2); // right = 2*i + 2\r\n\r\n    // If left child is larger than root\r\n    if (l < n && this.barsClone[l].width > this.barsClone[largest].width)\r\n      largest = l;\r\n\r\n    // If right child is larger than largest so far\r\n    if (r < n && this.barsClone[r].width > this.barsClone[largest].width)\r\n      largest = r;\r\n\r\n    // If largest is not root\r\n    if (largest != i) {\r\n      let swap = this.barsClone[i].width;\r\n      this.barsClone[i].width = this.barsClone[largest].width;\r\n      this.barsClone[largest].width = swap;\r\n      const tempBars = cloneDeep(this.barsClone);\r\n      tempBars[i].barsCustomClass = \"current_bar\";\r\n      tempBars[largest].barsCustomClass = \"current_bar\";\r\n      this.setState({ bars: tempBars });\r\n\r\n      // Recursively heapify the affected sub-tree\r\n      await this.heapify(n, largest);\r\n    }\r\n  }\r\n\r\n  getMax(n) {\r\n    let mx = this.barsClone[0].width;\r\n    for (let i = 1; i < n; i++)\r\n      if (this.barsClone[i].width > mx) mx = this.barsClone[i].width;\r\n    return mx;\r\n  }\r\n\r\n  // A function to do counting sort of this.barsClone[] according to\r\n  // the digit represented by exp.\r\n  async countSort(n, exp) {\r\n    let output = new Array(n);\r\n    for (let k = 0; k < n; ++k) output[k] = 0;\r\n\r\n    let i;\r\n\r\n    let count = new Array(n);\r\n    for (let k = 0; k < n; ++k) count[k] = 0;\r\n\r\n    // Store count of occurrences in count[]\r\n    for (i = 0; i < n; i++)\r\n      count[parseInt((this.barsClone[i].width / exp) % 10)]++;\r\n\r\n    // Change count[i] so that count[i] now contains actual\r\n    //  position of this digit in output[]\r\n    for (i = 1; i < 10; i++) count[i] += count[i - 1];\r\n\r\n    // Build the output array\r\n    for (i = n - 1; i >= 0; i--) {\r\n      output[\r\n        count[parseInt((this.barsClone[i].width / exp) % 10)] - 1\r\n      ] = this.barsClone[i].width;\r\n\r\n      await this.sleep(20);\r\n      const tempBars = cloneDeep(this.barsClone);\r\n\r\n      tempBars[\r\n        count[parseInt((this.barsClone[i].width / exp) % 10)] - 1\r\n      ].barsCustomClass = \"current_bar\";\r\n\r\n      // tempBars[i].barsCustomClass = \"current_bar\";\r\n      // tempBars[].barsCustomClass = \"current_bar\";\r\n      this.setState({ bars: tempBars });\r\n\r\n      count[parseInt(this.barsClone[i].width / exp) % 10]--;\r\n    }\r\n\r\n    // Copy the output array to arr[], so that arr[] now\r\n    // contains sorted numbers according to current digit\r\n    for (i = 0; i < n; i++) {\r\n      this.barsClone[i].width = output[i];\r\n      await this.sleep(20);\r\n      const tempBars = cloneDeep(this.barsClone);\r\n\r\n      tempBars[i].barsCustomClass = \"current_bar\";\r\n      // tempBars[].barsCustomClass = \"current_bar\";\r\n      this.setState({ bars: tempBars });\r\n    }\r\n  }\r\n\r\n  async radixsortHandler() {\r\n    await this.radixsort(this.state.totalBars);\r\n    this.colorSortedBars();\r\n    this.setState({ generateButtonisActive: true, isSorting: false });\r\n  }\r\n\r\n  // The main function to that sorts arr[] of size n using\r\n  // Radix Sort\r\n  async radixsort(n) {\r\n    // Find the maximum number to know number of digits\r\n\r\n    let m = this.getMax(n);\r\n    // Do counting sort for every digit. Note that instead\r\n    // of passing digit number, exp is passed. exp is 10^i\r\n    // where i is current digit number\r\n    for (let exp = 1; parseInt(m / exp) > 0; exp = parseInt(exp * 10)) {\r\n      await this.countSort(n, exp);\r\n      // this.setState({ bars: this.barsClone });\r\n    }\r\n  }\r\n\r\n  async shellSortHandler() {\r\n    await this.shellSort();\r\n    this.colorSortedBars();\r\n    this.setState({ generateButtonisActive: true, isSorting: false });\r\n  }\r\n\r\n  async shellSort() {\r\n    let n = this.state.totalBars;\r\n\r\n    // Start with a big gap, then reduce the gap\r\n    for (let gap = parseInt(n / 2); gap > 0; gap = parseInt(gap / 2)) {\r\n      // Do a gapped insertion sort for this gap size.\r\n      // The first gap elements a[0..gap-1] are already\r\n      // in gapped order keep adding one more element\r\n      // until the entire array is gap sorted\r\n      for (let i = gap; i < n; i += 1) {\r\n        // add a[i] to the elements that have been gap\r\n        // sorted save a[i] in temp and make a hole at\r\n        // position i\r\n        let temp = this.barsClone[i].width;\r\n\r\n        // shift earlier gap-sorted elements up until\r\n        // the correct location for a[i] is found\r\n        let j;\r\n        const tempBars = cloneDeep(this.barsClone);\r\n\r\n        for (\r\n          j = i;\r\n          j >= gap && this.barsClone[j - gap].width > temp;\r\n          j -= gap\r\n        ) {\r\n          this.barsClone[j].width = this.barsClone[j - gap].width;\r\n          await this.sleep(50 - this.state.sortingSpeed);\r\n          tempBars[j].barsCustomClass = \"current_bar\";\r\n          this.setState({ bars: tempBars });\r\n        }\r\n\r\n        // put temp (the original a[i]) in its correct\r\n        // location\r\n        await this.sleep(50 - this.state.sortingSpeed / 5);\r\n        this.barsClone[j].width = temp;\r\n        tempBars[j].barsCustomClass = \"current_bar\";\r\n        this.setState({ bars: tempBars });\r\n      }\r\n    }\r\n    return;\r\n  }\r\n\r\n  async bucketSort() {\r\n    // 1) Create n empty buckets\r\n    // let b = [];\r\n    let ratio = this.state.totalBars * 50;\r\n    let size = this.state.totalBars;\r\n    let b = new Array(size);\r\n\r\n    // making widht smaller as to create arrays of less size\r\n    for (let i = 0; i < this.state.totalBars; i++) {\r\n      this.barsClone[i].width /= ratio;\r\n    }\r\n\r\n    // for (let i = 0; i < size; ++i) b[i] = 0;\r\n\r\n    let n = this.state.totalBars;\r\n    // 2) Put array elements in different buckets\r\n    for (let i = 0; i < size; i++) {\r\n      b[i] = new Array();\r\n    }\r\n\r\n    for (let i = 0; i < n; i++) {\r\n      let bi = n * this.barsClone[i].width; // Index in bucket\r\n      // b[parseInt(bi)] = new Array();\r\n      await this.sleep(50 - this.state.sortingSpeed);\r\n      let tempBars = cloneDeep(this.barsClone);\r\n      for (let k = 0; k < this.state.totalBars; k++) {\r\n        tempBars[k].width = tempBars[k].width * ratio;\r\n        // if (k < index) tempBars[k].barsCustomClass = \"sorted_bar\";\r\n      }\r\n      tempBars[i].barsCustomClass = \"current_bar\";\r\n      this.setState({ bars: tempBars });\r\n\r\n      b[parseInt(bi)].push(this.barsClone[i].width);\r\n    }\r\n\r\n    // 3) Sort individual buckets\r\n    for (let i = 0; i < size; i++) b[i].sort();\r\n\r\n    // 4) Concatenate all buckets into arr[]\r\n    let index = 0;\r\n    for (let i = 0; i < size; i++) {\r\n      for (let j = 0; j < b[i].length; j++) {\r\n        this.barsClone[index++].width = b[i][j];\r\n        let tempBars = cloneDeep(this.barsClone);\r\n        for (let k = 0; k < this.state.totalBars; k++) {\r\n          tempBars[k].width = tempBars[k].width * ratio;\r\n          if (k < index) tempBars[k].barsCustomClass = \"sorted_bar\";\r\n        }\r\n        if (index < this.state.totalBars)\r\n          tempBars[index].barsCustomClass = \"current_bar\";\r\n        this.setState({ bars: tempBars });\r\n        await this.sleep(50 - this.state.sortingSpeed * 3);\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < this.state.totalBars; i++) {\r\n      this.barsClone[i].width *= ratio;\r\n    }\r\n  }\r\n\r\n  colorSortedBars = () => {\r\n    if (this.state.sortTypeSelected.value == \"insertion\")\r\n      this.i = this.state.totalBars - 2;\r\n    else this.i = this.state.totalBars - 1;\r\n    this.sortIntervalId = setInterval(() => {\r\n      if (this.i < 0) {\r\n        clearInterval(this.sortIntervalId);\r\n        this.resetEverything();\r\n      } else {\r\n        this.barsClone[this.i].barsCustomClass = \"sorted_bar\";\r\n        this.setState({ bars: this.barsClone });\r\n        this.i--;\r\n      }\r\n    }, 50 - this.state.sortingSpeed);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <BarsContainer\r\n          bars={this.state.bars}\r\n          OnGenerateButtonPressed={this.handleOnGenerateButtonPressed}\r\n          OnSortButtonPressed={this.handleOnSortButtonPressed}\r\n          barsPosition={this.state.barsPosition}\r\n          sortTypes={this.state.sortTypes}\r\n          onSortTypeSelected={this.handleOnSortTypeSelected}\r\n          OnOrientationPressed={this.handleOnOrientationPressed}\r\n          orientation={this.state.orientation}\r\n          barsHeight={this.state.barsHeight}\r\n          barsWidth={this.state.barsWidth}\r\n          onSpeedSliderChange={this.handeleOnSpeedSliderChange}\r\n          onbarSizeSliderChange={this.handleOnbarSizeSliderChange}\r\n          sortingSpeed={this.state.sortingSpeed}\r\n          onBarsHeightChange={this.handleonBarsHeightChange}\r\n          onBarsWidthChange={this.handleonBarsWidthChange}\r\n          windoWidth={this.state.windoWidth}\r\n          onSortingPressed={this.props.onSortingPressed}\r\n          onSearchingPressed={this.props.onSearchingPressed}\r\n          isSortingSelected={this.props.isSortingSelected}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainArea;\r\n","import React from \"react\";\r\nimport MainArea from \"./MainArea\";\r\n\r\nconst SortingIndex = (props) => {\r\n  return (\r\n    <MainArea\r\n      isSortingSelected={props.isSortingSelected}\r\n      onSortingPressed={props.onSortingPressed}\r\n      onSearchingPressed={props.onSearchingPressed}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SortingIndex;\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst Array = (props) => {\r\n  const {\r\n    array,\r\n    onArrayValueChange,\r\n    onhandleSearchValuechange,\r\n    onSearchkeypressed,\r\n    searchKey,\r\n    searchBoxStyle,\r\n    shouldDisplayResult,\r\n    searching,\r\n    arraySize,\r\n    onhandleArraySizeValuechange,\r\n    keyFound,\r\n    generateButtonPlaced,\r\n    onfillrandomButtonPressed,\r\n    onSortButtonPressed,\r\n    isBinarySearch,\r\n    handleOnLinearPressed,\r\n    handleonBinaryPressed,\r\n    onSearchingPressed,\r\n    onSortingPressed,\r\n    isSortingSelected,\r\n    windoWidth,\r\n  } = props;\r\n\r\n  function Result() {\r\n    if (shouldDisplayResult && !searching) {\r\n      if (keyFound)\r\n        return <span className=\"search_result SearchKeyFound p-2\">Found</span>;\r\n      else\r\n        return (\r\n          <span className=\"search_result searchKeyCheckedAndNotFound p-2\">\r\n            Not Found\r\n          </span>\r\n        );\r\n    } else return \"\";\r\n  }\r\n\r\n  function searchbuttonpressed() {\r\n    if (!shouldDisplayResult && !searching) {\r\n      return onSearchkeypressed;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  function getLinearStyle() {\r\n    if (!isBinarySearch) {\r\n      return {\r\n        border: \"2px solid red\",\r\n        color: \"white\",\r\n        backgroundColor: \"red\",\r\n      };\r\n    } else {\r\n      return {\r\n        border: \"2px solid red\",\r\n        color: \"red\",\r\n        backgroundColor: \"white\",\r\n      };\r\n    }\r\n  }\r\n\r\n  function getBinaryStyle() {\r\n    if (isBinarySearch) {\r\n      return {\r\n        border: \"2px solid red\",\r\n        color: \"white\",\r\n        backgroundColor: \"red\",\r\n      };\r\n    } else {\r\n      return {\r\n        border: \"2px solid red\",\r\n        color: \"red\",\r\n        backgroundColor: \"white\",\r\n      };\r\n    }\r\n  }\r\n\r\n  function Sort() {\r\n    return (\r\n      <button\r\n        className=\"btn btn-sm btn-info ml-2 \"\r\n        onClick={onSortButtonPressed}\r\n      >\r\n        Sort\r\n      </button>\r\n    );\r\n  }\r\n\r\n  function getSearchingBtnStyle() {\r\n    if (isSortingSelected) {\r\n      return { border: \"1px solid red\", color: \"white\", opacity: \"0.9\" };\r\n    } else\r\n      return {\r\n        border: \"1px solid red\",\r\n        backgroundColor: \"#351735\",\r\n        color: \"white\",\r\n      };\r\n  }\r\n\r\n  function getSortingBtnStyle() {\r\n    if (!isSortingSelected) {\r\n      return { border: \"1px solid red\", color: \"white\", opacity: \"0.9\" };\r\n    } else\r\n      return {\r\n        border: \"1px solid red\",\r\n        backgroundColor: \"#351735\",\r\n        color: \"white\",\r\n      };\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper className=\"\">\r\n        <div className=\"container_top p-2 pb-0\">\r\n          <span>\r\n            <span className=\"label\">Size:</span>\r\n            <input\r\n              value={arraySize}\r\n              type=\"text\"\r\n              className=\"arraysizebox ml-2 mr-2\"\r\n              onChange={onhandleArraySizeValuechange}\r\n              maxLength=\"3\"\r\n              size=\"3\"\r\n            ></input>\r\n          </span>\r\n\r\n          <Button\r\n            onClick={generateButtonPlaced}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n          >\r\n            Generate\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            className=\"ml-2\"\r\n            onClick={onfillrandomButtonPressed}\r\n          >\r\n            Fill\r\n          </Button>\r\n\r\n          <Sort />\r\n          {windoWidth > 700 ? (\r\n            <span\r\n              style={{\r\n                display: \"inline-block\",\r\n                right: \"10px\",\r\n                position: \"absolute\",\r\n              }}\r\n              className=\"algo_option_container\"\r\n            >\r\n              <button\r\n                className=\"algo_option\"\r\n                onClick={onSearchingPressed}\r\n                style={getSearchingBtnStyle()}\r\n              >\r\n                Searching\r\n              </button>\r\n              <button\r\n                className=\"mr-3 algo_option\"\r\n                onClick={onSortingPressed}\r\n                style={getSortingBtnStyle()}\r\n              >\r\n                Sorting\r\n              </button>\r\n            </span>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n        <div className=\"search_type pl-2\">\r\n          <button\r\n            className=\"btn btn-sm btn-info m-2\"\r\n            style={getLinearStyle()}\r\n            onClick={handleOnLinearPressed}\r\n          >\r\n            Linear Search\r\n          </button>\r\n          <button\r\n            className=\"btn btn-sm btn-info ml-2\"\r\n            style={getBinaryStyle()}\r\n            onClick={handleonBinaryPressed}\r\n          >\r\n            Binary Search\r\n          </button>\r\n\r\n          {windoWidth < 700 ? (\r\n            <span\r\n              style={{\r\n                display: \"inline-block\",\r\n                right: \"10px\",\r\n                position: \"absolute\",\r\n              }}\r\n              className=\"algo_option_container\"\r\n            >\r\n              {isSortingSelected ? (\r\n                <button\r\n                  className=\"algo_option\"\r\n                  onClick={onSearchingPressed}\r\n                  style={getSearchingBtnStyle()}\r\n                >\r\n                  Searching\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  className=\"mr-3 ml-0 algo_option mt-3\"\r\n                  onClick={onSortingPressed}\r\n                  style={getSortingBtnStyle()}\r\n                >\r\n                  Sorting\r\n                </button>\r\n              )}\r\n            </span>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n\r\n          <div className=\"pl-3 container_top2\" style={{ display: \"inline\" }}>\r\n            <span>\r\n              <br />\r\n              <span className=\"label\">What To Search</span>\r\n\r\n              <input\r\n                value={searchKey}\r\n                type=\"text\"\r\n                className={\"arraysizebox m-1 mb-2 \" + searchBoxStyle}\r\n                onChange={onhandleSearchValuechange}\r\n                maxLength=\"3\"\r\n                size=\"3\"\r\n                style={{ display: \"inline-block\" }}\r\n              ></input>\r\n            </span>\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              className=\"\"\r\n              onClick={searchbuttonpressed()}\r\n            >\r\n              Search\r\n            </Button>\r\n\r\n            <span>{props.children} </span>\r\n\r\n            <Result />\r\n          </div>\r\n        </div>\r\n      </Paper>\r\n\r\n      <div className=\"array p-2 pt-5\">\r\n        {array.map((element) => (\r\n          <input\r\n            className={\"arrayBox \" + element.customClass}\r\n            type=\"text\"\r\n            key={element.index}\r\n            value={element.value}\r\n            name={element.index}\r\n            onChange={onArrayValueChange}\r\n            maxLength=\"3\"\r\n            size=\"3\"\r\n          ></input>\r\n        ))}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Array;\r\n","import React, { Component } from \"react\";\r\nimport Array from \"./Array\";\r\nimport \"./home.css\";\r\nimport \"../Sorting/sorting.css\";\r\nimport \"./home.css\";\r\n\r\nclass WorkArea extends Component {\r\n  state = {\r\n    array: [],\r\n    searchKey: 0,\r\n    searchBoxStyle: \"\",\r\n    keyFound: false,\r\n    searching: false,\r\n    shouldDisplayResult: false,\r\n    arraySize: 10,\r\n    intervalTime: 5,\r\n    stopTime: 2000,\r\n    isBinarySearch: false, //make it false for linear search\r\n    isSorted: false,\r\n    middleInBinary: 0, //mid\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.handlegenerateButtonPlaced();\r\n  }\r\n\r\n  handleArrayValuechange = (e) => {\r\n    this.resetArrayStyle();\r\n    const arrayConst = this.state.array.map((element) => {\r\n      if (element.index === parseInt(e.target.name)) {\r\n        if (e.target.value === \"\") element.value = 0;\r\n        //need to fix this : when the number starts from '0';\r\n        else element.value = parseInt(e.target.value, 10);\r\n      }\r\n      return element;\r\n    });\r\n\r\n    this.setState({ array: arrayConst });\r\n  };\r\n\r\n  handleArraySizeValuechange = (e) => {\r\n    let size = e.target.value;\r\n    if (size === \"\") size = \"\";\r\n    else size = parseInt(size);\r\n    this.resetArrayStyle();\r\n    this.setState({ arraySize: size });\r\n  };\r\n\r\n  handleSearchValuechange = (e) => {\r\n    let tempSearchKey;\r\n\r\n    if (e.target.value === \"\") tempSearchKey = \"\";\r\n    //need to fix this : when the number starts from '0';\r\n    else tempSearchKey = parseInt(e.target.value, 10);\r\n    this.setState({ searchKey: tempSearchKey });\r\n    this.resetArrayStyle();\r\n  };\r\n\r\n  handleOnLinearPressed = () => {\r\n    console.log(\"linear is pressed\");\r\n    this.resetArrayStyle();\r\n\r\n    this.setState({ isBinarySearch: false });\r\n  };\r\n\r\n  handleonBinaryPressed = () => {\r\n    console.log(\"biary is pressed\");\r\n    this.resetArrayStyle();\r\n\r\n    this.setState({ isBinarySearch: true });\r\n  };\r\n\r\n  handlegenerateButtonPlaced = () => {\r\n    let i = 0;\r\n    this.resetArrayStyle();\r\n\r\n    if (this.state.arraySize < 1) alert(\"We Dont't Do That Here!\");\r\n    //this will set different speeds for differet array sizes\r\n    else if (this.state.arraySize <= 100) this.setState({ intervalTime: 50 });\r\n    else if (this.state.arraySize < 500) this.setState({ intervalTime: 20 });\r\n    else this.setState({ intervalTime: 5 });\r\n\r\n    let arrayClone = [];\r\n    for (i = 0; i < this.state.arraySize; i++) {\r\n      arrayClone.push({\r\n        index: i,\r\n        value: \"\",\r\n        customClass: \"\",\r\n      });\r\n    }\r\n\r\n    this.setState({ array: arrayClone, isSorted: false });\r\n  };\r\n\r\n  handleSortButtonPressed = () => {\r\n    if (this.state.array[0].value !== \"\") {\r\n      let tempArray = [...this.state.array];\r\n      this.resetArrayStyle();\r\n      tempArray.sort(function (a, b) {\r\n        return a.value - b.value;\r\n      });\r\n      this.setState({ array: tempArray, isSorted: true });\r\n    } else {\r\n      alert(\"Fill it first\");\r\n    }\r\n  };\r\n\r\n  handlefillrandomButtonPressed = () => {\r\n    this.resetArrayStyle();\r\n    let i = 0;\r\n    let arrayClone = [];\r\n    let a = 0;\r\n    let b = 100;\r\n    for (i = 0; i < this.state.arraySize; i++) {\r\n      arrayClone.push({\r\n        index: i,\r\n        value: parseInt(Math.random() * (b - a) + a),\r\n        customClass: \"\",\r\n      });\r\n    }\r\n    this.setState({ array: arrayClone, isSorted: false });\r\n  };\r\n\r\n  handleonSearchkeypressed = () => {\r\n    let i = 0;\r\n    let intervalTime = this.state.intervalTime;\r\n    this.resetArrayStyle();\r\n\r\n    if (this.state.array.length > 0) {\r\n      //For Linear Search\r\n      if (!this.state.isBinarySearch) {\r\n        this.setState({\r\n          searchBoxStyle: \"searchBoxOnSearchActive\",\r\n          searching: true,\r\n        });\r\n        var intervalId = setInterval(\r\n          () => this.linearSearch(i++, intervalId),\r\n          intervalTime\r\n        );\r\n      }\r\n      //For Binanry Search\r\n      else {\r\n        //check for sorted\r\n        if (!this.state.isSorted) {\r\n          alert(\"Sort it first dude!\");\r\n        } else {\r\n          this.setState({\r\n            searchBoxStyle: \"searchBoxOnSearchActive\",\r\n            searching: true,\r\n          });\r\n          this.binarySearch(this.state.searchKey);\r\n        }\r\n      }\r\n    } else {\r\n      alert(\"Generate It before Searching\");\r\n    }\r\n    i = 0;\r\n  };\r\n\r\n  linearSearch = (i, intervalId) => {\r\n    let tempArray = [...this.state.array];\r\n    // if (i > 0) tempArray[i - 1].customClass = \"\"; //to make previous element reset style\r\n    this.setState({ array: tempArray });\r\n\r\n    //When found\r\n    if (this.state.array[i].value === this.state.searchKey) {\r\n      tempArray[i].customClass = \"SearchKeyFound\";\r\n      this.setState({\r\n        array: tempArray,\r\n        keyFound: true,\r\n        searching: false,\r\n        shouldDisplayResult: true,\r\n      });\r\n      clearInterval(intervalId);\r\n      // setTimeout(this.resetArrayStyle, this.state.stopTime);\r\n      return;\r\n    } else {\r\n      tempArray[i].customClass = \"searchKeyCheckedAndNotFound\"; //when checked and not equal\r\n      this.setState({ array: tempArray });\r\n    }\r\n\r\n    //Not found\r\n    if (i === this.state.array.length - 1) {\r\n      clearInterval(intervalId);\r\n      this.setState({\r\n        keyFound: false,\r\n        searching: false,\r\n        shouldDisplayResult: true,\r\n        searchBoxStyle: \"searchKeyCheckedAndNotFound\",\r\n      });\r\n      // setTimeout(this.resetArrayStyle, this.state.stopTime);\r\n    }\r\n  };\r\n\r\n  binarySearch = (key) => {\r\n    let sortedArray = [...this.state.array];\r\n    let start = 0;\r\n    let i = 0;\r\n    let end = sortedArray.length - 1;\r\n    this.setState({\r\n      middleInBinary: sortedArray[Math.floor((start + end) / 2)].value,\r\n      array: sortedArray,\r\n    });\r\n\r\n    let intervalid = setInterval(() => {\r\n      {\r\n        if (!(start <= end)) {\r\n          clearInterval(intervalid);\r\n          this.setState({\r\n            searching: false,\r\n            shouldDisplayResult: true,\r\n            keyFound: false,\r\n          });\r\n          return;\r\n        }\r\n\r\n        let middle = Math.floor((start + end) / 2);\r\n        sortedArray[middle].customClass = \"binarymiddle\";\r\n        this.setState({\r\n          middleInBinary: sortedArray[middle].value,\r\n          array: sortedArray,\r\n        });\r\n        if (sortedArray[middle].value === key) {\r\n          // found the key\r\n          sortedArray[middle].customClass = \"binarySearchMiddle\";\r\n          this.setState({\r\n            keyFound: true,\r\n            array: sortedArray,\r\n            searching: false,\r\n            shouldDisplayResult: true,\r\n          });\r\n          clearInterval(intervalid);\r\n          return;\r\n        } else if (sortedArray[middle].value < key) {\r\n          // continue searching to the right\r\n          for (i = start; i <= end; i++) {\r\n            if (i <= middle) sortedArray[i].customClass = \"binarySearchWaste\";\r\n            else sortedArray[i].customClass = \"binarySearchUse\";\r\n          }\r\n          sortedArray[middle].customClass = \"binarymiddle\";\r\n          this.setState({ array: sortedArray });\r\n          sortedArray[middle].customClass = \"binarySearchWaste\";\r\n          start = middle + 1;\r\n        } else {\r\n          // search searching to the left\r\n          for (i = start; i <= end; i++) {\r\n            if (i >= middle) sortedArray[i].customClass = \"binarySearchWaste\";\r\n            else sortedArray[i].customClass = \"binarySearchUse\";\r\n          }\r\n          sortedArray[middle].customClass = \"binarymiddle\";\r\n          this.setState({ array: sortedArray });\r\n          sortedArray[middle].customClass = \"binarySearchWaste\";\r\n          end = middle - 1;\r\n        }\r\n        if (!this.state.searching) {\r\n          this.setState({\r\n            keyFound: false,\r\n            searching: false,\r\n            shouldDisplayResult: true,\r\n            searchBoxStyle: \"searchKeyCheckedAndNotFound\",\r\n          });\r\n        }\r\n      }\r\n    }, this.state.stopTime);\r\n  };\r\n\r\n  ShowComparisation = () => {\r\n    let compareresult = \"\";\r\n    let customClass = \"\";\r\n    if (this.state.searchKey < this.state.middleInBinary) {\r\n      compareresult = \"<\";\r\n      customClass = \"searchKeyisSmall\";\r\n    } else if (this.state.searchKey > this.state.middleInBinary) {\r\n      compareresult = \">\";\r\n      customClass = \"\";\r\n      customClass = \"searchKeyisLarge\";\r\n    } else compareresult = \"=\";\r\n\r\n    if (this.state.isBinarySearch && this.state.searching) {\r\n      return (\r\n        <React.Fragment>\r\n          <span\r\n            className={\r\n              \"binary_compare arrayBox searchBox m-2 \" +\r\n              this.state.searchBoxStyle\r\n            }\r\n          >\r\n            <span className={customClass}>{this.state.searchKey}</span>\r\n\r\n            <span className={customClass}>{\" \" + compareresult + \" \"}</span>\r\n\r\n            <span className=\"binarymiddle\">{this.state.middleInBinary}</span>\r\n          </span>\r\n        </React.Fragment>\r\n      );\r\n    } else return \"\";\r\n  };\r\n\r\n  //this function will set array style to \"\"\r\n  resetArrayStyle = () => {\r\n    const tempArray = this.state.array.map((e) => {\r\n      e.customClass = \"\";\r\n      return e;\r\n    });\r\n\r\n    this.setState({\r\n      array: tempArray,\r\n      searchBoxStyle: \"\",\r\n      searching: false,\r\n      shouldDisplayResult: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Array\r\n          array={this.state.array}\r\n          searchKey={this.state.searchKey}\r\n          onArrayValueChange={this.handleArrayValuechange}\r\n          onhandleSearchValuechange={this.handleSearchValuechange}\r\n          onSearchkeypressed={this.handleonSearchkeypressed}\r\n          searchBoxStyle={this.state.searchBoxStyle}\r\n          keyFound={this.state.keyFound}\r\n          searching={this.state.searching}\r\n          shouldDisplayResult={this.state.shouldDisplayResult}\r\n          arraySize={this.state.arraySize}\r\n          onhandleArraySizeValuechange={this.handleArraySizeValuechange}\r\n          generateButtonPlaced={this.handlegenerateButtonPlaced}\r\n          onfillrandomButtonPressed={this.handlefillrandomButtonPressed}\r\n          onSortButtonPressed={this.handleSortButtonPressed}\r\n          showComparisation={this.state.showComparisation}\r\n          isBinarySearch={this.state.isBinarySearch}\r\n          handleOnLinearPressed={this.handleOnLinearPressed}\r\n          handleonBinaryPressed={this.handleonBinaryPressed}\r\n          isSortingSelected={this.props.isSortingSelected}\r\n          onSearchingPressed={this.props.onSearchingPressed}\r\n          windoWidth={window.innerWidth}\r\n          onSortingPressed={this.props.onSortingPressed}\r\n        >\r\n          <this.ShowComparisation />\r\n        </Array>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WorkArea;\r\n","import React, { Component } from \"react\";\r\nimport SortingIndex from \"./Sorting/SortingIndex\";\r\nimport WorkArea from \"./Searching/WorkArea\";\r\n\r\nimport \"./algo.css\";\r\n\r\nclass AlgoIndex extends Component {\r\n  state = { isSortingSelected: true };\r\n\r\n  GetRenderElement = () => {\r\n    if (this.state.isSortingSelected) {\r\n      return (\r\n        <SortingIndex\r\n          isSortingSelected={this.state.isSortingSelected}\r\n          onSearchingPressed={this.handleOnSearchingPressed}\r\n          onSortingPressed={this.handleOnSortingPressed}\r\n        />\r\n      );\r\n    } else\r\n      return (\r\n        <WorkArea\r\n          isSortingSelected={this.state.isSortingSelected}\r\n          onSearchingPressed={this.handleOnSearchingPressed}\r\n          onSortingPressed={this.handleOnSortingPressed}\r\n        />\r\n      );\r\n  };\r\n\r\n  handleOnSearchingPressed = () => {\r\n    console.log(\"searching is pressed\");\r\n    this.setState({ isSortingSelected: false });\r\n  };\r\n  handleOnSortingPressed = () => {\r\n    console.log(\"sorting is pressed\");\r\n    this.setState({ isSortingSelected: true });\r\n  };\r\n\r\n  render() {\r\n    return <this.GetRenderElement />;\r\n  }\r\n}\r\n\r\nexport default AlgoIndex;\r\n","import { getElementError } from \"@testing-library/react\";\r\nimport { React, useState } from \"react\";\r\n\r\nconst Percentage = () => {\r\n  const [votes, setVotes] = useState(\"\");\r\n  const [total, setTotal] = useState(\"\");\r\n\r\n  function showPercentage() {\r\n    let per = (votes / total) * 100;\r\n    document.getElementById(\"result\").innerHTML = per.toPrecision(4) + \" %\";\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ul>\r\n        <li style={{ padding: \"20px\", color: \"white\" }}>\r\n          Votes{\" \"}\r\n          <input\r\n            value={votes}\r\n            type=\"number\"\r\n            onChange={(e) => setVotes(e.target.value)}\r\n          ></input>{\" \"}\r\n        </li>\r\n        <li style={{ padding: \"20px\", color: \"white\" }}>\r\n          Total{\" \"}\r\n          <input\r\n            value={total}\r\n            type=\"number\"\r\n            onChange={(e) => setTotal(e.target.value)}\r\n          ></input>{\" \"}\r\n        </li>\r\n        <li style={{ padding: \"20px\", color: \"white\" }}>\r\n          <button onClick={showPercentage}> = </button>\r\n        </li>\r\n        <div\r\n          style={{\r\n            backgroundColor: \"red\",\r\n            display: \"inline\",\r\n            padding: \"10px\",\r\n            color: \"white\",\r\n          }}\r\n          id=\"result\"\r\n        ></div>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Percentage;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import ToDoWithBootstrap from \"./ToDoApp/ToDoAppIndex.js\";\n// import SortingIndex from \"./AlgoRhytm/Sorting/SortingIndex\";\n// import \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport AlgoIndex from \"./AlgoRhytm/AlgoIndex.js\";\nimport Percentage from \"./Percentage/percentage.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Percentage />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}